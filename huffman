#include <stdio.h>
#include <stdlib.h>
#include <memory.h>

typedef struct treeNode {	// 연결 자료구조로 구성하기 위해 트리의 노드 정의
	char data;
	struct treeNode *left;  // 왼쪽 서브 트리에 대한 링크 필드
	struct treeNode *right; // 오른쪽 서브 트리에 대한 링크 필드
} treeNode;

// data를 루트 노드로 하여 왼쪽 서브 트리와 오른쪽 서브 트리를 연결하는 연산
treeNode* makeRootNode(char data, treeNode* leftNode, treeNode* rightNode) {
	treeNode* root = (treeNode *)malloc(sizeof(treeNode));
	root->data = data;
	root->left = leftNode;
	root->right = rightNode;
	return root;
}

void decryption(treeNode* main, int zip[], int length)
{
	int i = 0; //zip에서 하나씩 받아와서 0인지 1인지 판별
	int index = 0; //zip인덱스

	treeNode* newnode=(treeNode*)malloc(sizeof(treeNode)); //제일 상단노드 참조.
	newnode = main;
	while (index <= length)
	{
		i = zip[index]; 
		if (i == 0)
		{
			newnode = newnode->left; 
			if ((newnode->left == NULL) && (newnode->right == NULL)) //리프노드면
			{
				printf("%c ", newnode->data);
				newnode = main; //단말노드를 찾았으니 다시 루트 노드로 이동
			}
		}
		else if (i == 1)
		{
			newnode = newnode->right;
			if ((newnode->left == NULL) && (newnode->right == NULL)) //리프노드면
			{
				printf("%c ",newnode->data);
				newnode = main;//단말노드를 찾았으니 다시 루트 노드로 이동
			}
		}
		index++; //다음 인덱스 값 참조해서 실행
	}

	free(newnode); //할당받은 메모리 해제
}
void main() {
	// 허프만 코드 이진 트리 만들기
	treeNode* n11 = makeRootNode('u', NULL, NULL);
	treeNode* n10 = makeRootNode('i', NULL, NULL);
	treeNode* n9 = makeRootNode('h', NULL, NULL);
	treeNode* n8 = makeRootNode('5', n10, n11);
	treeNode* n7 = makeRootNode('f', NULL, NULL);
	treeNode* n6 = makeRootNode('s', NULL, NULL);
	treeNode* n5 = makeRootNode('4', n8, n9);
	treeNode* n4 = makeRootNode('n', NULL, NULL);
	treeNode* n3 = makeRootNode('3', n6, n7);
	treeNode* n2 = makeRootNode('2', n4, n5);
	treeNode* n1 = makeRootNode('1', n2, n3);
	
	// 허프만 zip data
	int huffman_zip[] = { 0,1,1,0,1,0,1,1,1,1,0,0,1,0,0,1,0,1,1,0,1,0,1,0,0 };
	printf("복호화 결과입니다: ");
decryption(n1, huffman_zip, sizeof(huffman_zip)/sizeof(int));
}
